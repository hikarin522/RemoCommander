{
  "components": {
    "requestBodies": {
      "AirConParams_": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/AirConParams_"
            }
          }
        },
        "description": "AirConParams_",
        "required": true
      },
      "ApplianceParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceParams"
            }
          }
        },
        "description": "ApplianceParams",
        "required": true
      },
      "CreateApplianceRequest": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/CreateApplianceRequest"
            }
          }
        },
        "description": "CreateApplianceRequest",
        "required": true
      },
      "CreateSignalParameters": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/CreateSignalParameters"
            }
          }
        },
        "description": "Signal parameters.",
        "required": true
      },
      "DetectApplianceRequest": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/DetectApplianceRequest"
            }
          }
        },
        "description": "DetectApplianceRequest",
        "required": true
      },
      "EmptyObject": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/EmptyObject"
            }
          }
        },
        "description": "EmptyObject",
        "required": true
      },
      "HomeParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/HomeParams"
            }
          }
        },
        "description": "HomeParams",
        "required": true
      },
      "HomeUserParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/HomeUserParams"
            }
          }
        },
        "description": "HomeUserParams",
        "required": true
      },
      "HumidityOffsetParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/HumidityOffsetParams"
            }
          }
        },
        "description": "Humidity offset parameters.",
        "required": true
      },
      "LightParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/LightParams"
            }
          }
        },
        "description": "Light parameters.",
        "required": true
      },
      "LightProjectorParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/LightProjectorParams"
            }
          }
        },
        "description": "LightProjector parameters.",
        "required": true
      },
      "RefreshELPropertyRequest": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/RefreshELPropertyRequest"
            }
          }
        },
        "description": "RefreshELPropertyRequest",
        "required": true
      },
      "ReorderAppliancesParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/ReorderAppliancesParams"
            }
          }
        },
        "description": "ReorderAppliancesParams",
        "required": true
      },
      "ReorderSignalsParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/ReorderSignalsParams"
            }
          }
        },
        "description": "ReorderSignalsParams",
        "required": true
      },
      "SetELPropertyRequest": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/SetELPropertyRequest"
            }
          }
        },
        "description": "SetELPropertyRequest",
        "required": true
      },
      "TVParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TVParams"
            }
          }
        },
        "description": "TV parameters.",
        "required": true
      },
      "TemperatureOffsetParams": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TemperatureOffsetParams"
            }
          }
        },
        "description": "Temperature offset parameters.",
        "required": true
      },
      "TransferRequest": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/TransferRequest"
            }
          }
        },
        "description": "TransferRequest",
        "required": true
      },
      "UpdateDeviceParameters": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/UpdateDeviceParameters"
            }
          }
        },
        "description": "UpdateDeviceParameters",
        "required": true
      },
      "UpdateProfileParam": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/UpdateProfileParam"
            }
          }
        },
        "description": "UpdateProfileParam",
        "required": true
      },
      "UpdateSignalParameters": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "$ref": "#/components/schemas/UpdateSignalParameters"
            }
          }
        },
        "description": "Signal parameters.",
        "required": true
      }
    },
    "responses": {
      "AirconSettingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AirconSettingsResponse"
            }
          }
        },
        "description": "AC settings."
      },
      "ApplianceModelAndParams": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceModelAndParams"
            }
          }
        },
        "description": "List of air conditioner model and settings. Best match comes first."
      },
      "ApplianceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceResponse"
            }
          }
        },
        "description": "ApplianceResponse"
      },
      "ApplianceResponses": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ApplianceResponses"
            }
          }
        },
        "description": "ApplianceResponses"
      },
      "BLEPrivateMacroResponses": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BLEPrivateMacroResponses"
            }
          }
        },
        "description": "BLEPrivateMacroResponses"
      },
      "DeviceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceResponse"
            }
          }
        },
        "description": "DeviceResponse"
      },
      "DeviceResponses": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeviceResponses"
            }
          }
        },
        "description": "DeviceResponses"
      },
      "EchonetLiteApplianceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EchonetLiteApplianceResponse"
            }
          }
        },
        "description": "EchonetLiteApplianceResponse"
      },
      "EmptyObject": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmptyObject"
            }
          }
        },
        "description": "EmptyObject"
      },
      "HomeInvite": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeInvite"
            }
          }
        },
        "description": "HomeInvite"
      },
      "HomeResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeResponse"
            }
          }
        },
        "description": "HomeResponse"
      },
      "HomeResponses": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/HomeResponses"
            }
          }
        },
        "description": "HomeResponses"
      },
      "LightState": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LightState"
            }
          }
        },
        "description": "Light state."
      },
      "Signal": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Signal"
            }
          }
        },
        "description": "Signal"
      },
      "Signals": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Signals"
            }
          }
        },
        "description": "Signals"
      },
      "TVState": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TVState"
            }
          }
        },
        "description": "TV state."
      },
      "UserAndRoles": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserAndRoles"
            }
          }
        },
        "description": "UserAndRoles"
      },
      "UserResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserResponse"
            }
          }
        },
        "description": "User information."
      }
    },
    "schemas": {
      "Addr": {
        "type": "string"
      },
      "AirConExtraResponse": {
        "properties": {
          "availability": {
            "type": "string"
          },
          "defaultTime": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "options": {
            "items": {
              "$ref": "#/components/schemas/ExtraOption"
            },
            "nullable": true,
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "text",
          "description",
          "type",
          "availability"
        ],
        "type": "object"
      },
      "AirConParams_": {
        "properties": {
          "air_direction": {
            "description": "AC air direction. Empty means automatic.",
            "type": "string"
          },
          "air_direction_h": {
            "description": "AC horizontal air direction.",
            "type": "string"
          },
          "air_volume": {
            "description": "AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          },
          "button": {
            "description": "Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.",
            "type": "string"
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "AC specific parameters. Pass device-specific options through the extra query string in the form extra.$id=$value. Valid id / value pairs correspond to the entries returned in ApplianceResponse.extras. Only IDs whose availability field is available may be specified.",
            "nullable": true,
            "type": "object"
          },
          "operation_mode": {
            "description": "AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.",
            "type": "string"
          },
          "temperature": {
            "description": "Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          },
          "temperature_unit": {
            "description": "Temperature unit. 'c' or 'f' or '' for unknown.",
            "type": "string"
          }
        },
        "required": [
          "temperature",
          "temperature_unit",
          "operation_mode",
          "air_volume",
          "air_direction",
          "air_direction_h",
          "button"
        ],
        "type": "object"
      },
      "AirConRangeResponse": {
        "properties": {
          "extras": {
            "items": {
              "$ref": "#/components/schemas/AirConExtraResponse"
            },
            "nullable": true,
            "type": "array"
          },
          "fixedButtons": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "modes": {
            "additionalProperties": {
              "$ref": "#/components/schemas/RangeResponse_Mode"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "required": [
          "modes",
          "fixedButtons"
        ],
        "type": "object"
      },
      "AirConResponse": {
        "nullable": true,
        "properties": {
          "range": {
            "$ref": "#/components/schemas/AirConRangeResponse"
          },
          "tempUnit": {
            "type": "string"
          }
        },
        "required": [
          "range",
          "tempUnit"
        ],
        "type": "object"
      },
      "AirConResponsePtr": {
        "nullable": true,
        "properties": {
          "range": {
            "$ref": "#/components/schemas/AirConRangeResponse"
          },
          "tempUnit": {
            "type": "string"
          }
        },
        "required": [
          "range",
          "tempUnit"
        ],
        "type": "object"
      },
      "AirDirectionHRange": {
        "items": {
          "type": "string"
        },
        "nullable": true,
        "type": "array"
      },
      "AirDirectionRange": {
        "items": {
          "type": "string"
        },
        "nullable": true,
        "type": "array"
      },
      "AirVolumeRange": {
        "items": {
          "type": "string"
        },
        "nullable": true,
        "type": "array"
      },
      "AirconSEMResponse": {
        "nullable": true,
        "properties": {
          "adjusting": {
            "type": "boolean"
          },
          "area": {
            "$ref": "#/components/schemas/Area"
          },
          "campaign_slug": {
            "$ref": "#/components/schemas/DRCampaignSlug"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "area",
          "campaign_slug",
          "adjusting"
        ],
        "type": "object"
      },
      "AirconSEMResponsePtr": {
        "nullable": true,
        "properties": {
          "adjusting": {
            "type": "boolean"
          },
          "area": {
            "$ref": "#/components/schemas/Area"
          },
          "campaign_slug": {
            "$ref": "#/components/schemas/DRCampaignSlug"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "area",
          "campaign_slug",
          "adjusting"
        ],
        "type": "object"
      },
      "AirconSettingsResponse": {
        "nullable": true,
        "properties": {
          "button": {
            "description": "Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.",
            "type": "string"
          },
          "dir": {
            "description": "AC air direction. Empty means automatic.",
            "type": "string"
          },
          "dirh": {
            "description": "AC horizontal air direction.",
            "type": "string"
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "AC specific parameters. Pass device-specific options through the extra query string in the form extra.$id=$value. Valid id / value pairs correspond to the entries returned in ApplianceResponse.extras. Only IDs whose availability field is available may be specified.",
            "nullable": true,
            "type": "object"
          },
          "mode": {
            "description": "AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.",
            "type": "string"
          },
          "temp": {
            "description": "Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          },
          "temp_unit": {
            "description": "Temperature unit. 'c' or 'f' or '' for unknown.",
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "vol": {
            "description": "AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          }
        },
        "required": [
          "temp",
          "temp_unit",
          "mode",
          "vol",
          "dir",
          "dirh",
          "button",
          "updated_at"
        ],
        "type": "object"
      },
      "AirconSettingsResponsePtr": {
        "nullable": true,
        "properties": {
          "button": {
            "description": "Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.",
            "type": "string"
          },
          "dir": {
            "description": "AC air direction. Empty means automatic.",
            "type": "string"
          },
          "dirh": {
            "description": "AC horizontal air direction.",
            "type": "string"
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "AC specific parameters. Pass device-specific options through the extra query string in the form extra.$id=$value. Valid id / value pairs correspond to the entries returned in ApplianceResponse.extras. Only IDs whose availability field is available may be specified.",
            "nullable": true,
            "type": "object"
          },
          "mode": {
            "description": "AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.",
            "type": "string"
          },
          "temp": {
            "description": "Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          },
          "temp_unit": {
            "description": "Temperature unit. 'c' or 'f' or '' for unknown.",
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "vol": {
            "description": "AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          }
        },
        "required": [
          "temp",
          "temp_unit",
          "mode",
          "vol",
          "dir",
          "dirh",
          "button",
          "updated_at"
        ],
        "type": "object"
      },
      "ApplianceModel": {
        "properties": {
          "country": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "remote_name": {
            "type": "string"
          },
          "series": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "country",
          "manufacturer",
          "remote_name",
          "series",
          "name",
          "image"
        ],
        "type": "object"
      },
      "ApplianceModelAndParam": {
        "properties": {
          "model": {
            "$ref": "#/components/schemas/ApplianceModel"
          },
          "params": {
            "$ref": "#/components/schemas/Params"
          }
        },
        "required": [
          "model",
          "params"
        ],
        "type": "object"
      },
      "ApplianceModelAndParams": {
        "items": {
          "$ref": "#/components/schemas/ApplianceModelAndParam"
        },
        "nullable": true,
        "type": "array"
      },
      "ApplianceParams": {
        "properties": {
          "image": {
            "description": "Basename of the image file included in the app. Ex: 'ico_ac_1'.",
            "type": "string"
          },
          "nickname": {
            "description": "Appliance name.",
            "type": "string"
          }
        },
        "required": [
          "nickname",
          "image"
        ],
        "type": "object"
      },
      "ApplianceResponse": {
        "properties": {
          "aircon": {
            "$ref": "#/components/schemas/AirConResponsePtr"
          },
          "aircon_smart_eco_mode": {
            "$ref": "#/components/schemas/AirconSEMResponsePtr"
          },
          "ble": {
            "$ref": "#/components/schemas/BLEControlItemPtr"
          },
          "device": {
            "$ref": "#/components/schemas/DevicePtr"
          },
          "echonetlite": {
            "$ref": "#/components/schemas/ELResponsePtr"
          },
          "floor_heater": {
            "$ref": "#/components/schemas/FloorHeaterResponsePtr"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "light": {
            "$ref": "#/components/schemas/LightResponsePtr"
          },
          "light_projector": {
            "$ref": "#/components/schemas/LightProjectorResponsePtr"
          },
          "mornin_plus": {
            "$ref": "#/components/schemas/MorninPlusResponsePtr"
          },
          "nickname": {
            "type": "string"
          },
          "qrio_lock": {
            "$ref": "#/components/schemas/QrioLockResponsePtr"
          },
          "settings": {
            "$ref": "#/components/schemas/AirconSettingsResponsePtr"
          },
          "signals": {
            "items": {
              "$ref": "#/components/schemas/Signal"
            },
            "nullable": true,
            "type": "array"
          },
          "smart_meter": {
            "$ref": "#/components/schemas/SmartMeterResponsePtr"
          },
          "tv": {
            "$ref": "#/components/schemas/TVResponsePtr"
          },
          "type": {
            "description": "Appliance types. AC, TV, LIGHT, etc.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "type",
          "nickname",
          "image",
          "signals"
        ],
        "type": "object"
      },
      "ApplianceResponses": {
        "items": {
          "$ref": "#/components/schemas/ApplianceResponse"
        },
        "nullable": true,
        "type": "array"
      },
      "Area": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "type": "integer"
      },
      "BLEControlItem": {
        "nullable": true,
        "properties": {
          "addr": {
            "type": "string"
          },
          "addr_type": {
            "type": "string"
          },
          "bonded": {
            "type": "boolean"
          },
          "hue": {
            "$ref": "#/components/schemas/BLEHueLightControlItemPtr"
          },
          "macros": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BLEPrivateMacroResponse"
            },
            "nullable": true,
            "type": "object"
          },
          "sesame": {
            "$ref": "#/components/schemas/BLESesameControlItemPtr"
          }
        },
        "required": [
          "addr",
          "addr_type",
          "bonded"
        ],
        "type": "object"
      },
      "BLEControlItemPtr": {
        "nullable": true,
        "properties": {
          "addr": {
            "type": "string"
          },
          "addr_type": {
            "type": "string"
          },
          "bonded": {
            "type": "boolean"
          },
          "hue": {
            "$ref": "#/components/schemas/BLEHueLightControlItemPtr"
          },
          "macros": {
            "additionalProperties": {
              "$ref": "#/components/schemas/BLEPrivateMacroResponse"
            },
            "nullable": true,
            "type": "object"
          },
          "sesame": {
            "$ref": "#/components/schemas/BLESesameControlItemPtr"
          }
        },
        "required": [
          "addr",
          "addr_type",
          "bonded"
        ],
        "type": "object"
      },
      "BLEHueLightControlItem": {
        "nullable": true,
        "properties": {
          "light_type": {
            "type": "string"
          }
        },
        "required": [
          "light_type"
        ],
        "type": "object"
      },
      "BLEHueLightControlItemPtr": {
        "nullable": true,
        "properties": {
          "light_type": {
            "type": "string"
          }
        },
        "required": [
          "light_type"
        ],
        "type": "object"
      },
      "BLEPrivateMacroResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "url"
        ],
        "type": "object"
      },
      "BLEPrivateMacroResponses": {
        "items": {
          "$ref": "#/components/schemas/BLEPrivateMacroResponse"
        },
        "nullable": true,
        "type": "array"
      },
      "BLESesameControlItem": {
        "nullable": true,
        "properties": {
          "device_type": {
            "type": "string"
          },
          "key_level": {
            "type": "string"
          },
          "user_index": {
            "items": {
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "uuid",
          "device_type",
          "key_level",
          "user_index"
        ],
        "type": "object"
      },
      "BLESesameControlItemPtr": {
        "nullable": true,
        "properties": {
          "device_type": {
            "type": "string"
          },
          "key_level": {
            "type": "string"
          },
          "user_index": {
            "items": {
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          },
          "uuid": {
            "type": "string"
          }
        },
        "required": [
          "uuid",
          "device_type",
          "key_level",
          "user_index"
        ],
        "type": "object"
      },
      "ButtonDBButton": {
        "properties": {
          "image": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "image",
          "label"
        ],
        "type": "object"
      },
      "CreateApplianceRequest": {
        "properties": {
          "device": {
            "type": "string"
          },
          "image": {
            "description": "Basename of the image file included in the app. Ex: 'ico_ac_1'.",
            "type": "string"
          },
          "model": {
            "description": "ApplianceModel ID if the appliance we're trying to create is included in IRDB.",
            "type": "string"
          },
          "model_type": {
            "description": "Enum of 'AC', 'TV', 'Light', etc.",
            "type": "string"
          },
          "nickname": {
            "description": "Appliance name.",
            "type": "string"
          }
        },
        "required": [
          "nickname",
          "image",
          "device",
          "model",
          "model_type"
        ],
        "type": "object"
      },
      "CreateSignalParameters": {
        "properties": {
          "image": {
            "description": "Basename of the image file included in the app. Ex: 'ico_io'.",
            "type": "string"
          },
          "message": {
            "description": "JSON serialized object describing infrared signals. Includes 'data', 'freq' and 'format' keys.",
            "type": "string"
          },
          "name": {
            "description": "Signal name.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "image",
          "message"
        ],
        "type": "object"
      },
      "DRCampaignSlug": {
        "type": "string"
      },
      "DetectApplianceRequest": {
        "properties": {
          "Device": {
            "nullable": true,
            "type": "string"
          },
          "Message": {
            "description": "JSON serialized object describing infrared signals. Includes 'data', 'freq' and 'format' keys.",
            "type": "string"
          }
        },
        "required": [
          "Message"
        ],
        "type": "object"
      },
      "Device": {
        "nullable": true,
        "properties": {
          "bt_mac_address": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/Time"
          },
          "firmware_version": {
            "type": "string"
          },
          "humidity_offset": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "temperature_offset": {
            "type": "number"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          }
        },
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at",
          "mac_address",
          "serial_number",
          "firmware_version",
          "temperature_offset",
          "humidity_offset"
        ],
        "type": "object"
      },
      "DevicePtr": {
        "nullable": true,
        "properties": {
          "bt_mac_address": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/Time"
          },
          "firmware_version": {
            "type": "string"
          },
          "humidity_offset": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "serial_number": {
            "type": "string"
          },
          "temperature_offset": {
            "type": "number"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          }
        },
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at",
          "mac_address",
          "serial_number",
          "firmware_version",
          "temperature_offset",
          "humidity_offset"
        ],
        "type": "object"
      },
      "DeviceResponse": {
        "properties": {
          "bt_mac_address": {
            "nullable": true,
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/Time"
          },
          "firmware_version": {
            "type": "string"
          },
          "humidity_offset": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "mac_address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "newest_events": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SensorValue"
            },
            "description": "The SensorValue key means 'te' = temperature, 'hu' = humidity, 'il' = illumination, 'mo' = movement. The val of 'mo' is always 1 and when movement event is captured created_at is updated.",
            "nullable": true,
            "type": "object"
          },
          "online": {
            "nullable": true,
            "type": "boolean"
          },
          "serial_number": {
            "type": "string"
          },
          "temperature_offset": {
            "type": "number"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "users": {
            "description": "Deprecated. Do not use in new code.",
            "items": {
              "$ref": "#/components/schemas/UserDeviceResponse"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "name",
          "id",
          "created_at",
          "updated_at",
          "mac_address",
          "serial_number",
          "firmware_version",
          "temperature_offset",
          "humidity_offset",
          "newest_events"
        ],
        "type": "object"
      },
      "DeviceResponses": {
        "items": {
          "$ref": "#/components/schemas/DeviceResponse"
        },
        "nullable": true,
        "type": "array"
      },
      "ELPropertyResponse": {
        "nullable": true,
        "properties": {
          "epc": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "val": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "epc",
          "val",
          "updated_at"
        ],
        "type": "object"
      },
      "ELPropertyResponsePtr": {
        "nullable": true,
        "properties": {
          "epc": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "val": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "epc",
          "val",
          "updated_at"
        ],
        "type": "object"
      },
      "ELResponse": {
        "description": "The ECHONET lite properties fetched from the appliance. See 'Detailed Requirements for ECHONET Device Objects' for more details. ref. https://echonet.jp/spec_object_rl_en/",
        "nullable": true,
        "properties": {
          "get_properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBGetSetPropertyPtr"
            },
            "nullable": true,
            "type": "object"
          },
          "identifier": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "ip": {
            "nullable": true,
            "type": "string"
          },
          "localize": {
            "$ref": "#/components/schemas/EchonetliteDBLocalizePropertiesPtr"
          },
          "manufacturer": {
            "type": "integer"
          },
          "route_type": {
            "type": "string"
          },
          "set_properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBGetSetPropertyPtr"
            },
            "nullable": true,
            "type": "object"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "manufacturer",
          "route_type",
          "version",
          "instance",
          "set_properties",
          "get_properties"
        ],
        "type": "object"
      },
      "ELResponsePtr": {
        "description": "The ECHONET lite properties fetched from the appliance. See 'Detailed Requirements for ECHONET Device Objects' for more details. ref. https://echonet.jp/spec_object_rl_en/",
        "nullable": true,
        "properties": {
          "get_properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBGetSetPropertyPtr"
            },
            "nullable": true,
            "type": "object"
          },
          "identifier": {
            "type": "string"
          },
          "instance": {
            "type": "string"
          },
          "ip": {
            "nullable": true,
            "type": "string"
          },
          "localize": {
            "$ref": "#/components/schemas/EchonetliteDBLocalizePropertiesPtr"
          },
          "manufacturer": {
            "type": "integer"
          },
          "route_type": {
            "type": "string"
          },
          "set_properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBGetSetPropertyPtr"
            },
            "nullable": true,
            "type": "object"
          },
          "version": {
            "type": "string"
          }
        },
        "required": [
          "identifier",
          "manufacturer",
          "route_type",
          "version",
          "instance",
          "set_properties",
          "get_properties"
        ],
        "type": "object"
      },
      "EchonetLiteAppliance": {
        "properties": {
          "Device": {
            "$ref": "#/components/schemas/DevicePtr"
          },
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/Property"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname",
          "type",
          "properties"
        ],
        "type": "object"
      },
      "EchonetLiteApplianceResponse": {
        "properties": {
          "appliances": {
            "items": {
              "$ref": "#/components/schemas/EchonetLiteAppliance"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "appliances"
        ],
        "type": "object"
      },
      "EchonetliteDBGetSetProperty": {
        "nullable": true,
        "properties": {
          "enum": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "EchonetliteDBGetSetPropertyPtr": {
        "nullable": true,
        "properties": {
          "enum": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "EchonetliteDBLocalizeProperties": {
        "nullable": true,
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBLocalizePropertyPtr"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EchonetliteDBLocalizePropertiesPtr": {
        "nullable": true,
        "properties": {
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBLocalizePropertyPtr"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EchonetliteDBLocalizeProperty": {
        "nullable": true,
        "properties": {
          "enum": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBPropertyLocalizationPtr"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EchonetliteDBLocalizePropertyPtr": {
        "nullable": true,
        "properties": {
          "enum": {
            "additionalProperties": {
              "$ref": "#/components/schemas/EchonetliteDBPropertyLocalizationPtr"
            },
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "EchonetliteDBPropertyLocalization": {
        "nullable": true,
        "properties": {
          "label": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "EchonetliteDBPropertyLocalizationPtr": {
        "nullable": true,
        "properties": {
          "label": {
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "EmptyObject": {
        "type": "object"
      },
      "ExtraOption": {
        "properties": {
          "default": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "FloorHeaterResponse": {
        "nullable": true,
        "properties": {
          "range": {
            "$ref": "#/components/schemas/AirConRangeResponse"
          },
          "tempUnit": {
            "type": "string"
          }
        },
        "required": [
          "range",
          "tempUnit"
        ],
        "type": "object"
      },
      "FloorHeaterResponsePtr": {
        "nullable": true,
        "properties": {
          "range": {
            "$ref": "#/components/schemas/AirConRangeResponse"
          },
          "tempUnit": {
            "type": "string"
          }
        },
        "required": [
          "range",
          "tempUnit"
        ],
        "type": "object"
      },
      "HexBytes": {
        "items": {
          "type": "integer"
        },
        "nullable": true,
        "type": "array"
      },
      "Home": {
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "HomeInvite": {
        "properties": {
          "home": {
            "$ref": "#/components/schemas/HomePtr"
          },
          "url": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserPtr"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "HomeParams": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "HomePtr": {
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "HomeResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/LocationResponsePtr"
          },
          "name": {
            "type": "string"
          },
          "town": {
            "$ref": "#/components/schemas/TownResponse"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/MemberResponse"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "town",
          "users"
        ],
        "type": "object"
      },
      "HomeResponses": {
        "items": {
          "$ref": "#/components/schemas/HomeResponse"
        },
        "nullable": true,
        "type": "array"
      },
      "HomeUserParams": {
        "properties": {
          "user": {
            "type": "string"
          }
        },
        "required": [
          "user"
        ],
        "type": "object"
      },
      "HumidityOffsetParams": {
        "properties": {
          "offset": {
            "description": "Humidity offset value added to the measured humidity.",
            "type": "number"
          }
        },
        "required": [
          "offset"
        ],
        "type": "object"
      },
      "LightParams": {
        "properties": {
          "button": {
            "description": "Button name.",
            "type": "string"
          }
        },
        "required": [
          "button"
        ],
        "type": "object"
      },
      "LightProjectorParams": {
        "properties": {
          "button": {
            "description": "Button name.",
            "type": "string"
          }
        },
        "required": [
          "button"
        ],
        "type": "object"
      },
      "LightProjectorResponse": {
        "nullable": true,
        "properties": {
          "layout": {
            "$ref": "#/components/schemas/LightProjectordbLayout"
          }
        },
        "required": [
          "layout"
        ],
        "type": "object"
      },
      "LightProjectorResponsePtr": {
        "nullable": true,
        "properties": {
          "layout": {
            "$ref": "#/components/schemas/LightProjectordbLayout"
          }
        },
        "required": [
          "layout"
        ],
        "type": "object"
      },
      "LightProjectordbLayout": {
        "properties": {
          "image": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "templates": {
            "items": {
              "$ref": "#/components/schemas/TemplatePtr"
            },
            "nullable": true,
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "x_size": {
            "type": "integer"
          },
          "y_size": {
            "type": "integer"
          }
        },
        "required": [
          "type",
          "name",
          "uuid",
          "image",
          "label",
          "text",
          "x_size",
          "y_size",
          "templates"
        ],
        "type": "object"
      },
      "LightResponse": {
        "nullable": true,
        "properties": {
          "buttons": {
            "items": {
              "$ref": "#/components/schemas/ButtonDBButton"
            },
            "nullable": true,
            "type": "array"
          },
          "state": {
            "$ref": "#/components/schemas/LightStatePtr"
          }
        },
        "required": [
          "buttons"
        ],
        "type": "object"
      },
      "LightResponsePtr": {
        "nullable": true,
        "properties": {
          "buttons": {
            "items": {
              "$ref": "#/components/schemas/ButtonDBButton"
            },
            "nullable": true,
            "type": "array"
          },
          "state": {
            "$ref": "#/components/schemas/LightStatePtr"
          }
        },
        "required": [
          "buttons"
        ],
        "type": "object"
      },
      "LightState": {
        "nullable": true,
        "properties": {
          "brightness": {
            "type": "string"
          },
          "last_button": {
            "type": "string"
          },
          "power": {
            "type": "string"
          }
        },
        "required": [
          "brightness",
          "power",
          "last_button"
        ],
        "type": "object"
      },
      "LightStatePtr": {
        "nullable": true,
        "properties": {
          "brightness": {
            "type": "string"
          },
          "last_button": {
            "type": "string"
          },
          "power": {
            "type": "string"
          }
        },
        "required": [
          "brightness",
          "power",
          "last_button"
        ],
        "type": "object"
      },
      "LinkText": {
        "properties": {
          "link": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "required": [
          "text",
          "link"
        ],
        "type": "object"
      },
      "LocationResponse": {
        "nullable": true,
        "properties": {
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "radius": {
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "radius"
        ],
        "type": "object"
      },
      "LocationResponsePtr": {
        "nullable": true,
        "properties": {
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "radius": {
            "type": "number"
          }
        },
        "required": [
          "latitude",
          "longitude",
          "radius"
        ],
        "type": "object"
      },
      "MemberResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "joined_at": {
            "$ref": "#/components/schemas/Time"
          },
          "location_state": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname",
          "role",
          "location_state",
          "joined_at"
        ],
        "type": "object"
      },
      "MorninPlusDeviceResponse": {
        "nullable": true,
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "image",
          "name",
          "active"
        ],
        "type": "object"
      },
      "MorninPlusDeviceResponsePtr": {
        "nullable": true,
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "image",
          "name",
          "active"
        ],
        "type": "object"
      },
      "MorninPlusResponse": {
        "nullable": true,
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/MorninPlusDeviceResponsePtr"
            },
            "nullable": true,
            "type": "array"
          },
          "hi_speed_mode": {
            "type": "boolean"
          }
        },
        "required": [
          "devices",
          "hi_speed_mode"
        ],
        "type": "object"
      },
      "MorninPlusResponsePtr": {
        "nullable": true,
        "properties": {
          "devices": {
            "items": {
              "$ref": "#/components/schemas/MorninPlusDeviceResponsePtr"
            },
            "nullable": true,
            "type": "array"
          },
          "hi_speed_mode": {
            "type": "boolean"
          }
        },
        "required": [
          "devices",
          "hi_speed_mode"
        ],
        "type": "object"
      },
      "Params": {
        "properties": {
          "button": {
            "description": "Button. Specify 'power-off' always if you want the air conditioner powered off. Empty means powered on.",
            "type": "string"
          },
          "dir": {
            "description": "AC air direction. Empty means automatic.",
            "type": "string"
          },
          "dirh": {
            "description": "AC horizontal air direction.",
            "type": "string"
          },
          "extra": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "AC specific parameters. Pass device-specific options through the extra query string in the form extra.$id=$value. Valid id / value pairs correspond to the entries returned in ApplianceResponse.extras. Only IDs whose availability field is available may be specified.",
            "nullable": true,
            "type": "object"
          },
          "mode": {
            "description": "AC operation mode. The range of operation modes which the air conditioner accepts depends on the air conditioner model. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model.",
            "type": "string"
          },
          "temp": {
            "description": "Temperature. The temperature in string format. The unit is described in Aircon object. The range of Temperatures which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          },
          "temp_unit": {
            "description": "Temperature unit. 'c' or 'f' or '' for unknown.",
            "type": "string"
          },
          "vol": {
            "description": "AC air volume. Empty means automatic. Numbers express the amount of volume. The range of AirVolumes which the air conditioner accepts depends on the air conditioner model and operation mode. Check the 'AirConRangeMode' information in the response for the range of the particular air conditioner model and operation mode.",
            "type": "string"
          }
        },
        "required": [
          "temp",
          "temp_unit",
          "mode",
          "vol",
          "dir",
          "dirh",
          "button"
        ],
        "type": "object"
      },
      "PrivacyPolicyRevisionOutline": {
        "nullable": true,
        "properties": {
          "body": {
            "type": "string"
          },
          "links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LinkText"
            },
            "nullable": true,
            "type": "object"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "body",
          "links"
        ],
        "type": "object"
      },
      "PrivacyPolicyRevisionOutlinePtr": {
        "nullable": true,
        "properties": {
          "body": {
            "type": "string"
          },
          "links": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LinkText"
            },
            "nullable": true,
            "type": "object"
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "body",
          "links"
        ],
        "type": "object"
      },
      "Property": {
        "properties": {
          "epc": {
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/Time"
          },
          "val": {
            "type": "string"
          }
        },
        "required": [
          "epc",
          "val",
          "updated_at"
        ],
        "type": "object"
      },
      "QrioLockDeviceResponse": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "image",
          "name"
        ],
        "type": "object"
      },
      "QrioLockResponse": {
        "nullable": true,
        "properties": {
          "bd_address": {
            "type": "string"
          },
          "device": {
            "$ref": "#/components/schemas/QrioLockDeviceResponse"
          },
          "is_available": {
            "type": "boolean"
          },
          "sub_bd_address": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "bd_address",
          "is_available"
        ],
        "type": "object"
      },
      "QrioLockResponsePtr": {
        "nullable": true,
        "properties": {
          "bd_address": {
            "type": "string"
          },
          "device": {
            "$ref": "#/components/schemas/QrioLockDeviceResponse"
          },
          "is_available": {
            "type": "boolean"
          },
          "sub_bd_address": {
            "type": "string"
          }
        },
        "required": [
          "device",
          "bd_address",
          "is_available"
        ],
        "type": "object"
      },
      "RangeResponse_Mode": {
        "properties": {
          "dir": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "dirh": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "temp": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "vol": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "temp",
          "dir",
          "dirh",
          "vol"
        ],
        "type": "object"
      },
      "RefreshELPropertyRequest": {
        "properties": {
          "epc": {
            "description": "Comma separated EPCs in hex. eg: cf,da",
            "type": "string"
          }
        },
        "required": [
          "epc"
        ],
        "type": "object"
      },
      "ReorderAppliancesParams": {
        "properties": {
          "appliances": {
            "description": "List of all appliance IDs, comma separated.",
            "type": "string"
          }
        },
        "required": [
          "appliances"
        ],
        "type": "object"
      },
      "ReorderSignalsParams": {
        "properties": {
          "signals": {
            "description": "List of all signal IDs, comma separated.",
            "type": "string"
          }
        },
        "required": [
          "signals"
        ],
        "type": "object"
      },
      "SensorValue": {
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/Time"
          },
          "val": {
            "type": "number"
          }
        },
        "required": [
          "val",
          "created_at"
        ],
        "type": "object"
      },
      "SetELPropertyRequest": {
        "properties": {
          "epc": {
            "description": "EPC in hex string. eg: cf",
            "type": "string"
          },
          "val": {
            "description": "Value in hex string. String length must be 2x the number of bytes according to ECHONET Lite spec, and filled with zero if necessary. eg: 000000FF",
            "type": "string"
          }
        },
        "required": [
          "epc",
          "val"
        ],
        "type": "object"
      },
      "Signal": {
        "properties": {
          "id": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "image"
        ],
        "type": "object"
      },
      "Signals": {
        "items": {
          "$ref": "#/components/schemas/Signal"
        },
        "nullable": true,
        "type": "array"
      },
      "SmartMeterResponse": {
        "nullable": true,
        "properties": {
          "echonetlite_properties": {
            "items": {
              "$ref": "#/components/schemas/ELPropertyResponsePtr"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "echonetlite_properties"
        ],
        "type": "object"
      },
      "SmartMeterResponsePtr": {
        "nullable": true,
        "properties": {
          "echonetlite_properties": {
            "items": {
              "$ref": "#/components/schemas/ELPropertyResponsePtr"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "echonetlite_properties"
        ],
        "type": "object"
      },
      "TVParams": {
        "properties": {
          "button": {
            "description": "Button name.",
            "type": "string"
          }
        },
        "required": [
          "button"
        ],
        "type": "object"
      },
      "TVResponse": {
        "nullable": true,
        "properties": {
          "buttons": {
            "items": {
              "$ref": "#/components/schemas/ButtonDBButton"
            },
            "nullable": true,
            "type": "array"
          },
          "layout": {
            "items": {
              "$ref": "#/components/schemas/TvdbRowLayout"
            },
            "nullable": true,
            "type": "array"
          },
          "state": {
            "$ref": "#/components/schemas/TVStatePtr"
          }
        },
        "required": [
          "buttons"
        ],
        "type": "object"
      },
      "TVResponsePtr": {
        "nullable": true,
        "properties": {
          "buttons": {
            "items": {
              "$ref": "#/components/schemas/ButtonDBButton"
            },
            "nullable": true,
            "type": "array"
          },
          "layout": {
            "items": {
              "$ref": "#/components/schemas/TvdbRowLayout"
            },
            "nullable": true,
            "type": "array"
          },
          "state": {
            "$ref": "#/components/schemas/TVStatePtr"
          }
        },
        "required": [
          "buttons"
        ],
        "type": "object"
      },
      "TVState": {
        "nullable": true,
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "TVStatePtr": {
        "nullable": true,
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ],
        "type": "object"
      },
      "TemperatureOffsetParams": {
        "properties": {
          "offset": {
            "description": "Temperature offset value added to the measured temperature.",
            "type": "number"
          }
        },
        "required": [
          "offset"
        ],
        "type": "object"
      },
      "Template": {
        "nullable": true,
        "properties": {
          "image": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "templates": {
            "items": {
              "$ref": "#/components/schemas/TemplatePtr"
            },
            "nullable": true,
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "x_size": {
            "type": "integer"
          },
          "y_size": {
            "type": "integer"
          }
        },
        "required": [
          "type",
          "name",
          "uuid",
          "image",
          "label",
          "text",
          "x_size",
          "y_size",
          "templates"
        ],
        "type": "object"
      },
      "TemplatePtr": {
        "nullable": true,
        "properties": {
          "image": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "templates": {
            "items": {
              "$ref": "#/components/schemas/TemplatePtr"
            },
            "nullable": true,
            "type": "array"
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uuid": {
            "type": "string"
          },
          "x_size": {
            "type": "integer"
          },
          "y_size": {
            "type": "integer"
          }
        },
        "required": [
          "type",
          "name",
          "uuid",
          "image",
          "label",
          "text",
          "x_size",
          "y_size",
          "templates"
        ],
        "type": "object"
      },
      "Time": {
        "format": "date-time",
        "type": "string"
      },
      "TimePtr": {
        "format": "date-time",
        "nullable": true,
        "type": "string"
      },
      "TownResponse": {
        "properties": {
          "id": {
            "type": "integer"
          },
          "latitude": {
            "type": "number"
          },
          "longitude": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          },
          "prefecture": {
            "type": "string"
          }
        },
        "required": [
          "longitude",
          "latitude",
          "id",
          "name",
          "prefecture",
          "origin"
        ],
        "type": "object"
      },
      "TransferRequest": {
        "properties": {
          "devices": {
            "type": "string"
          }
        },
        "required": [
          "devices"
        ],
        "type": "object"
      },
      "TvdbRowLayout": {
        "properties": {
          "buttons": {
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "buttons"
        ],
        "type": "object"
      },
      "UUID": {
        "type": "string"
      },
      "UpdateDeviceParameters": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "UpdateProfileParam": {
        "properties": {
          "country": {
            "type": "string"
          },
          "distance_unit": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "temp_unit": {
            "type": "string"
          }
        },
        "required": [
          "nickname",
          "temp_unit",
          "distance_unit",
          "country"
        ],
        "type": "object"
      },
      "UpdateSignalParameters": {
        "properties": {
          "image": {
            "description": "Basename of the image file included in the app. Ex: 'ico_io'.",
            "type": "string"
          },
          "name": {
            "description": "Signal name.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "image"
        ],
        "type": "object"
      },
      "User": {
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname"
        ],
        "type": "object"
      },
      "UserAndRole": {
        "properties": {
          "role": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "user",
          "role"
        ],
        "type": "object"
      },
      "UserAndRoles": {
        "items": {
          "$ref": "#/components/schemas/UserAndRole"
        },
        "nullable": true,
        "type": "array"
      },
      "UserDeviceResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "superuser": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "nickname",
          "superuser"
        ],
        "type": "object"
      },
      "UserPtr": {
        "nullable": true,
        "properties": {
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "nickname"
        ],
        "type": "object"
      },
      "UserResponse": {
        "properties": {
          "country": {
            "type": "string"
          },
          "distance_unit": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "nickname": {
            "type": "string"
          },
          "temp_unit": {
            "type": "string"
          },
          "updated_privacy_policy": {
            "$ref": "#/components/schemas/PrivacyPolicyRevisionOutlinePtr"
          }
        },
        "required": [
          "id",
          "nickname"
        ],
        "type": "object"
      },
      "boolPtr": {
        "nullable": true,
        "type": "boolean"
      },
      "stringPtr": {
        "nullable": true,
        "type": "string"
      }
    },
    "securitySchemes": {
      "oauth2": {
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.nature.global/oauth2/auth",
            "scopes": {
              "basic": "Read + write access to user's profile (excluding email), Remos, appliances, signals.",
              "basic.read": "Read only access to user's profile (excluding email), Remos, appliances, signals.",
              "detectappliance": "Detect air conditioner model from infrared signals.",
              "home": "Read + write access to user's home.",
              "home.read": "Read only access to user's home.",
              "sendir": "Send infrared signals through Remo.",
              "sendrawir": "Send infrared signals in raw format through Remo."
            },
            "tokenUrl": "https://api.nature.global/oauth2/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "description": "Read/Write Nature Remo",
    "title": "Nature API",
    "version": "2.0.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/1/appliance_orders": {
      "post": {
        "description": "Reorder appliances.\nRequires basic.write OAuth2 scopes.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReorderAppliancesParams"
              }
            }
          },
          "description": "ReorderAppliancesParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances": {
      "get": {
        "description": "Fetch the list of appliances.\nRequires basic.read OAuth2 scopes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponses"
                }
              }
            },
            "description": "ApplianceResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      },
      "post": {
        "description": "Create a new appliance.\nRequires basic.write OAuth2 scopes.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplianceRequest"
              }
            }
          },
          "description": "CreateApplianceRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponse"
                }
              }
            },
            "description": "ApplianceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}": {
      "post": {
        "description": "Update an appliance.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ApplianceParams"
              }
            }
          },
          "description": "ApplianceParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponse"
                }
              }
            },
            "description": "ApplianceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/aircon_settings": {
      "post": {
        "description": "Update air conditioner settings.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AirConParams_"
              }
            }
          },
          "description": "AirConParams_",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AirconSettingsResponse"
                }
              }
            },
            "description": "AC settings."
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/delete": {
      "post": {
        "description": "Delete an appliance.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmptyObject"
              }
            }
          },
          "description": "EmptyObject",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/floor_heater_settings": {
      "post": {
        "description": "Update floor heater settings.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AirConParams_"
              }
            }
          },
          "description": "AirConParams_",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponse"
                }
              }
            },
            "description": "ApplianceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/light": {
      "post": {
        "description": "Send light signal.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LightParams"
              }
            }
          },
          "description": "Light parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LightState"
                }
              }
            },
            "description": "Light state."
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/light_projector": {
      "post": {
        "description": "Send light_projector signal.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LightProjectorParams"
              }
            }
          },
          "description": "LightProjector parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/sesame_bot/click": {
      "post": {
        "description": "Send SESAME bot click request.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/signal_orders": {
      "post": {
        "description": "Reorder signals.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ReorderSignalsParams"
              }
            }
          },
          "description": "ReorderSignalsParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/signals": {
      "get": {
        "description": "Fetch the list of signals.\nRequires basic.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signals"
                }
              }
            },
            "description": "Signals"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      },
      "post": {
        "description": "Create a new signal.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/CreateSignalParameters"
              }
            }
          },
          "description": "Signal parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signal"
                }
              }
            },
            "description": "Signal"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/appliances/{applianceid}/tv": {
      "post": {
        "description": "Send TV signal.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TVParams"
              }
            }
          },
          "description": "TV parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TVState"
                }
              }
            },
            "description": "TV state."
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/ble/appliances/{applianceid}/private_macros": {
      "get": {
        "description": "Fetch the list of ble_private_macros.\nRequires basic.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BLEPrivateMacroResponses"
                }
              }
            },
            "description": "BLEPrivateMacroResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      }
    },
    "/1/ble/private_macros/{privatemacroid}/exec": {
      "post": {
        "description": "Send BLE Private Macro control request.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "BLE Private Macro ID",
            "in": "path",
            "name": "privatemacroid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/detectappliance": {
      "post": {
        "description": "Find the air conditioner best matching the provided infrared signal.\nRequires detectappliance OAuth2 scopes.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DetectApplianceRequest"
              }
            }
          },
          "description": "DetectApplianceRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceModelAndParams"
                }
              }
            },
            "description": "List of air conditioner model and settings. Best match comes first."
          }
        },
        "security": [
          {
            "oauth2": [
              "detectappliance"
            ]
          }
        ]
      }
    },
    "/1/devices": {
      "get": {
        "description": "Fetch the list of Remo devices.\nRequires basic.read OAuth2 scopes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponses"
                }
              }
            },
            "description": "DeviceResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      }
    },
    "/1/devices/{deviceid}": {
      "post": {
        "description": "Update a device.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "deviceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeviceParameters"
              }
            }
          },
          "description": "UpdateDeviceParameters",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                }
              }
            },
            "description": "DeviceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/devices/{deviceid}/appliances": {
      "get": {
        "description": "Fetch the list of appliances registered to the Remo device.\nRequires basic.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "deviceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponses"
                }
              }
            },
            "description": "ApplianceResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      }
    },
    "/1/devices/{deviceid}/delete": {
      "post": {
        "description": "Delete a device.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "deviceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmptyObject"
              }
            }
          },
          "description": "EmptyObject",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/devices/{deviceid}/humidity_offset": {
      "post": {
        "description": "Update a device's humidity offset.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "deviceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HumidityOffsetParams"
              }
            }
          },
          "description": "Humidity offset parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                }
              }
            },
            "description": "DeviceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/devices/{deviceid}/temperature_offset": {
      "post": {
        "description": "Update a device's temperature offset.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Device Id",
            "in": "path",
            "name": "deviceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TemperatureOffsetParams"
              }
            }
          },
          "description": "Temperature offset parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponse"
                }
              }
            },
            "description": "DeviceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/echonetlite/appliances": {
      "get": {
        "description": "Fetch the list of ECHONET Lite appliances.\nRequires basic.read OAuth2 scopes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EchonetLiteApplianceResponse"
                }
              }
            },
            "description": "EchonetLiteApplianceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      }
    },
    "/1/echonetlite/appliances/{applianceid}/refresh": {
      "post": {
        "description": "Notify Remo E / Remo E lite to refresh one or more ECHONET Lite properties. This endpoint is subject to ECHONET Lite specific rate limiting. See the rate limiting section of the documentation for more details.\nRequires echonetlite.*.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RefreshELPropertyRequest"
              }
            }
          },
          "description": "RefreshELPropertyRequest",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "echonetlite.*.read"
            ]
          }
        ]
      }
    },
    "/1/echonetlite/appliances/{applianceid}/set": {
      "post": {
        "description": "Set one ECHONET Lite property. This endpoint is subject to ECHONET Lite specific rate limiting. See the rate limiting section of the documentation for more details.\nRequires echonetlite.*.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SetELPropertyRequest"
              }
            }
          },
          "description": "SetELPropertyRequest",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "echonetlite.*.write"
            ]
          }
        ]
      }
    },
    "/1/homes": {
      "get": {
        "description": "Fetch the list of homes.\nRequires home.read OAuth2 scopes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponses"
                }
              }
            },
            "description": "HomeResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.read"
            ]
          }
        ]
      },
      "post": {
        "description": "Create a new home.\nRequires home.write OAuth2 scopes.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HomeParams"
              }
            }
          },
          "description": "HomeParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}": {
      "post": {
        "description": "Update a home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HomeParams"
              }
            }
          },
          "description": "HomeParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/delete": {
      "post": {
        "description": "Delete a home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/devices": {
      "get": {
        "description": "Fetch the list of devices in a home.\nRequires home.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceResponses"
                }
              }
            },
            "description": "DeviceResponses"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.read"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/invites": {
      "post": {
        "description": "Create a new home invite.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeInvite"
                }
              }
            },
            "description": "HomeInvite"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/kick": {
      "post": {
        "description": "Kick a user from a home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HomeUserParams"
              }
            }
          },
          "description": "HomeUserParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/location": {
      "post": {
        "description": "Update a home's location.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/location/delete": {
      "post": {
        "description": "Delete a home's location.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/location_state/update": {
      "post": {
        "description": "Update the user's location state for a home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/owner": {
      "post": {
        "description": "Change the owner of the home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HomeUserParams"
              }
            }
          },
          "description": "HomeUserParams",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/part": {
      "post": {
        "description": "Part from a home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/transfer/{tohomeid}": {
      "post": {
        "description": "Transfer devices to another home.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Transfer to Home Id",
            "in": "path",
            "name": "tohomeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "description": "TransferRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/homes/{homeid}/users": {
      "get": {
        "description": "Fetch the list of users in a home.\nRequires home.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Home Id",
            "in": "path",
            "name": "homeid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndRoles"
                }
              }
            },
            "description": "UserAndRoles"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.read"
            ]
          }
        ]
      }
    },
    "/1/invites/{invitetoken}": {
      "get": {
        "description": "Show a home invite.\nRequires home.read OAuth2 scopes.",
        "parameters": [
          {
            "description": "Invite Token",
            "in": "path",
            "name": "invitetoken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeInvite"
                }
              }
            },
            "description": "HomeInvite"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.read"
            ]
          }
        ]
      },
      "post": {
        "description": "Accept a home invite.\nRequires home.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Invite Token",
            "in": "path",
            "name": "invitetoken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HomeResponse"
                }
              }
            },
            "description": "HomeResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "home.write"
            ]
          }
        ]
      }
    },
    "/1/signals/{signalid}": {
      "post": {
        "description": "Update a signal.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Signal Id",
            "in": "path",
            "name": "signalid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSignalParameters"
              }
            }
          },
          "description": "Signal parameters.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Signal"
                }
              }
            },
            "description": "Signal"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/signals/{signalid}/delete": {
      "post": {
        "description": "Delete a signal.\nRequires basic.write OAuth2 scopes.",
        "parameters": [
          {
            "description": "Signal Id",
            "in": "path",
            "name": "signalid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmptyObject"
              }
            }
          },
          "description": "EmptyObject",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/1/signals/{signalid}/send": {
      "post": {
        "description": "Send a signal.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Signal Id",
            "in": "path",
            "name": "signalid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EmptyObject"
              }
            }
          },
          "description": "EmptyObject",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyObject"
                }
              }
            },
            "description": "EmptyObject"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    },
    "/1/users/me": {
      "get": {
        "description": "Fetch the authenticated user's information.\nRequires basic.read OAuth2 scopes.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "User information."
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.read"
            ]
          }
        ]
      },
      "post": {
        "description": "Update authenticated user's information.\nRequires basic.write OAuth2 scopes.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileParam"
              }
            }
          },
          "description": "UpdateProfileParam",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "User information."
          }
        },
        "security": [
          {
            "oauth2": [
              "basic.write"
            ]
          }
        ]
      }
    },
    "/2/appliances/{applianceid}/aircon_settings": {
      "post": {
        "description": "Update air conditioner settings.\nRequires sendir OAuth2 scopes.",
        "parameters": [
          {
            "description": "Appliance Id",
            "in": "path",
            "name": "applianceid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/AirConParams_"
              }
            }
          },
          "description": "AirConParams_",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplianceResponse"
                }
              }
            },
            "description": "ApplianceResponse"
          }
        },
        "security": [
          {
            "oauth2": [
              "sendir"
            ]
          }
        ]
      }
    }
  },
  "servers": [
    {
      "description": "Public API Production",
      "url": "https://api.nature.global"
    }
  ]
}
